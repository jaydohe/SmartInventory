// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SI.Infrastructure.Persistence;

#nullable disable

namespace SI.Infrastructure.Migrations
{
    [DbContext(typeof(SIDbContext))]
    [Migration("20250416145109_Del_ManagerId_Employee")]
    partial class Del_ManagerId_Employee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SI.Domain.Entities.Activity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("longtext");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TargetId");

                    b.ToTable("ACTIVITY");
                });

            modelBuilder.Entity("SI.Domain.Entities.Agency", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CurrentDebt")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Representative")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("AGENCY");

                    b.HasData(
                        new
                        {
                            Id = "law",
                            Address = "Hà Nội",
                            Code = "AGC001",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 421, DateTimeKind.Unspecified).AddTicks(7971), new TimeSpan(0, 0, 0, 0, 0)),
                            CurrentDebt = 10000000m,
                            DistrictId = "1",
                            Email = "abc@gmail.com",
                            Name = "Công ty TNHH ABC",
                            PhoneNumber = "5887798511",
                            ProvinceId = "1",
                            Representative = "Tuyến Quý Tuân Nguyen",
                            TaxCode = "1234567890",
                            WardId = "1"
                        },
                        new
                        {
                            Id = "sunshine",
                            Address = "Hà Nội",
                            Code = "AGC002",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 422, DateTimeKind.Unspecified).AddTicks(858), new TimeSpan(0, 0, 0, 0, 0)),
                            CurrentDebt = 20000000m,
                            DistrictId = "1",
                            Email = "xyz@gmail.com",
                            Name = "Công ty TNHH XYZ",
                            PhoneNumber = "4975549838",
                            ProvinceId = "1",
                            Representative = "Sơn Nhung Ngải Phạm",
                            TaxCode = "0987654321",
                            WardId = "1"
                        });
                });

            modelBuilder.Entity("SI.Domain.Entities.BOM.BillOfMaterial", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ProductId");

                    b.ToTable("BILLOFMATERIAL");
                });

            modelBuilder.Entity("SI.Domain.Entities.BOM.BillOfMaterialDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BillOfMaterialId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MaterialId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("BILLOFMATERIALDETAIL");
                });

            modelBuilder.Entity("SI.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryEntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("CATEGORY");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CategoryEntityType = "WAREHOUSE",
                            Code = "CATW001",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 422, DateTimeKind.Unspecified).AddTicks(9943), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Danh mục 1"
                        },
                        new
                        {
                            Id = "2",
                            CategoryEntityType = "PRODUCT",
                            Code = "CATP002",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 423, DateTimeKind.Unspecified).AddTicks(482), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Danh mục 2"
                        },
                        new
                        {
                            Id = "3",
                            CategoryEntityType = "WAREHOUSE",
                            Code = "CATW003",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 423, DateTimeKind.Unspecified).AddTicks(485), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Danh mục 3"
                        },
                        new
                        {
                            Id = "4",
                            CategoryEntityType = "POSITION",
                            Code = "CATW004",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 423, DateTimeKind.Unspecified).AddTicks(486), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Toàn thời gian"
                        },
                        new
                        {
                            Id = "5",
                            CategoryEntityType = "POSITION",
                            Code = "CATW005",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 423, DateTimeKind.Unspecified).AddTicks(487), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bán thời gian"
                        });
                });

            modelBuilder.Entity("SI.Domain.Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("DEPARTMENT");

                    b.HasData(
                        new
                        {
                            Id = "huhuhu",
                            Code = "DEPART001",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 423, DateTimeKind.Unspecified).AddTicks(3842), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bộ phận quản lý kho"
                        },
                        new
                        {
                            Id = "sugar-town",
                            Code = "DEPART002",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 423, DateTimeKind.Unspecified).AddTicks(4169), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bộ phận quản lý sản xuất"
                        },
                        new
                        {
                            Id = "parrot-smell",
                            Code = "DEPART003",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 423, DateTimeKind.Unspecified).AddTicks(4171), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bộ phận quản lý bán hàng"
                        });
                });

            modelBuilder.Entity("SI.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateHired")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsManager")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PositionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("EMPLOYEE");

                    b.HasData(
                        new
                        {
                            Id = "bonk",
                            Address = "Hà Nội",
                            Code = "ADMIN01",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 423, DateTimeKind.Unspecified).AddTicks(9214), new TimeSpan(0, 0, 0, 0, 0)),
                            DateHired = new DateTime(2025, 4, 16, 21, 51, 8, 424, DateTimeKind.Local).AddTicks(673),
                            DistrictId = "1",
                            Email = "VanC@gmail.com",
                            GenderType = "FEMALE",
                            Name = "Nguyễn Văn C",
                            PhoneNumber = "7894561230",
                            PositionId = "1",
                            ProvinceId = "1",
                            WardId = "1"
                        },
                        new
                        {
                            Id = "hihihaha",
                            Address = "Hà Nội",
                            Code = "MANAGER01",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(841), new TimeSpan(0, 0, 0, 0, 0)),
                            DateHired = new DateTime(2025, 4, 16, 21, 51, 8, 424, DateTimeKind.Local).AddTicks(1103),
                            DepartmentId = "huhuhu",
                            DistrictId = "1",
                            Email = "VanA@gmail.com",
                            GenderType = "OTHER",
                            IsManager = true,
                            Name = "Nguyễn Văn A",
                            PhoneNumber = "0123456789",
                            PositionId = "4",
                            ProvinceId = "1",
                            WardId = "1",
                            WarehouseId = "choi-da-time"
                        },
                        new
                        {
                            Id = "hihihaharamram",
                            Address = "Hà Nội",
                            Code = "EMPLOYEE01",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(1225), new TimeSpan(0, 0, 0, 0, 0)),
                            DateHired = new DateTime(2025, 4, 16, 21, 51, 8, 424, DateTimeKind.Local).AddTicks(1229),
                            DepartmentId = "huhuhu",
                            DistrictId = "1",
                            Email = "VanB@gmail.com",
                            GenderType = "MALE",
                            IsManager = false,
                            Name = "Nguyễn Văn B",
                            PhoneNumber = "0123456987",
                            PositionId = "5",
                            ProvinceId = "1",
                            WardId = "1",
                            WarehouseId = "choi-da-time"
                        },
                        new
                        {
                            Id = "bankmiramram",
                            Address = "Hà Nội",
                            Code = "EMPLOYEE02",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(1230), new TimeSpan(0, 0, 0, 0, 0)),
                            DateHired = new DateTime(2025, 4, 16, 21, 51, 8, 424, DateTimeKind.Local).AddTicks(1233),
                            DepartmentId = "sugar-town",
                            DistrictId = "1",
                            Email = "VanD@gmail.com",
                            GenderType = "OTHER",
                            IsManager = true,
                            Name = "Nguyễn Văn D",
                            PhoneNumber = "0123457953",
                            PositionId = "6",
                            ProvinceId = "1",
                            WardId = "1",
                            WarehouseId = "choi-da-time"
                        },
                        new
                        {
                            Id = "dainam",
                            Address = "Hà Nội",
                            Code = "EMPLOYEE03",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(1233), new TimeSpan(0, 0, 0, 0, 0)),
                            DateHired = new DateTime(2025, 4, 16, 21, 51, 8, 424, DateTimeKind.Local).AddTicks(1235),
                            DepartmentId = "parrot-smell",
                            DistrictId = "1",
                            Email = "VanE@gmail.com",
                            GenderType = "MALE",
                            IsManager = false,
                            Name = "Nguyễn Văn E",
                            PhoneNumber = "012548756",
                            PositionId = "7",
                            ProvinceId = "1",
                            WardId = "1"
                        });
                });

            modelBuilder.Entity("SI.Domain.Entities.Forecast", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("EOQ")
                        .HasColumnType("double");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<double>("OptimalInventory")
                        .HasColumnType("double");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SafetyStock")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FORECAST");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsIssues.GoodsIssue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TotalToText")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Code");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("GOODSISSUE");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsIssues.GoodsIssueDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GoodsIssueId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("QuantityIssued")
                        .HasColumnType("int");

                    b.Property<int>("QuantityRequested")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("GoodsIssueId");

                    b.HasIndex("ProductId");

                    b.ToTable("GOODSISSUEDETAIL");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsReceipts.GoodsReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MaterialSupplierId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ProductionCommandId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShipperName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TotalToText")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("MaterialSupplierId");

                    b.HasIndex("ProductionCommandId");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("GOODSRECEIPT");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsReceipts.GoodsReceiptDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GoodsReceiptId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceiptId");

                    b.HasIndex("ProductId");

                    b.ToTable("GOODSRECEIPTDETAIL");
                });

            modelBuilder.Entity("SI.Domain.Entities.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("INVENTORY");
                });

            modelBuilder.Entity("SI.Domain.Entities.InventoryTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("INVENTORYTRANSACTION");
                });

            modelBuilder.Entity("SI.Domain.Entities.MaterialSupplier", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("BusinessItem")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CurrentDebt")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Representative")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("MATERIALSUPPLIER");

                    b.HasData(
                        new
                        {
                            Id = "bare",
                            Address = "Hà Nội",
                            BusinessItem = "Vật liệu xây dựng",
                            Code = "SUPPLIER001",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(5383), new TimeSpan(0, 0, 0, 0, 0)),
                            CurrentDebt = 0m,
                            DistrictId = "1",
                            Email = "A@gmail.com",
                            Name = "Nhà cung cấp 1",
                            PhoneNumber = "0123456789",
                            ProvinceId = "1",
                            Representative = "Nguyễn Văn A",
                            TaxCode = "123456789",
                            WardId = "1"
                        },
                        new
                        {
                            Id = "cower",
                            Address = "Hà Nội",
                            BusinessItem = "Vật liệu điện",
                            Code = "SUPPLIER002",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(6847), new TimeSpan(0, 0, 0, 0, 0)),
                            CurrentDebt = 0m,
                            DistrictId = "1",
                            Email = "B@gmail.com",
                            Name = "Nhà cung cấp 2",
                            PhoneNumber = "0987654321",
                            ProvinceId = "1",
                            Representative = "Nguyễn Văn B",
                            TaxCode = "8877955549",
                            WardId = "1"
                        });
                });

            modelBuilder.Entity("SI.Domain.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsMarked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NOTIFICATION");
                });

            modelBuilder.Entity("SI.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Code");

                    b.ToTable("ORDER");
                });

            modelBuilder.Entity("SI.Domain.Entities.Orders.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ORDERDETAIL");
                });

            modelBuilder.Entity("SI.Domain.Entities.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("POSITION");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CategoryId = "4",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(9385), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Giám đốc"
                        },
                        new
                        {
                            Id = "2",
                            CategoryId = "4",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(9704), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Phó giám đốc"
                        },
                        new
                        {
                            Id = "3",
                            CategoryId = "4",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(9706), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Trưởng phòng"
                        },
                        new
                        {
                            Id = "4",
                            CategoryId = "4",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(9707), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Quản lý kho"
                        },
                        new
                        {
                            Id = "5",
                            CategoryId = "4",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(9708), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nhân viên kho"
                        },
                        new
                        {
                            Id = "6",
                            CategoryId = "4",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(9711), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Quản lý sản xuất"
                        },
                        new
                        {
                            Id = "7",
                            CategoryId = "5",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 424, DateTimeKind.Unspecified).AddTicks(9712), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nhân viên bán hàng"
                        });
                });

            modelBuilder.Entity("SI.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<decimal>("HoldingCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("MaterialSupplierId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code");

                    b.HasIndex("MaterialSupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("PRODUCT");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CategoryId = "2",
                            Code = "PROD001",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 425, DateTimeKind.Unspecified).AddTicks(4017), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Mô tả sản phẩm 1",
                            HoldingCost = 50m,
                            Name = "Sản phẩm 1",
                            ProductType = "FINISHED_PRODUCT",
                            PurchasePrice = 1000m,
                            SellingPrice = 1200m,
                            Unit = "Cái",
                            WarehouseId = "choi-da-time"
                        },
                        new
                        {
                            Id = "2",
                            CategoryId = "2",
                            Code = "PROD002",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 425, DateTimeKind.Unspecified).AddTicks(5390), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Mô tả sản phẩm 2",
                            HoldingCost = 100m,
                            MaterialSupplierId = "bare",
                            Name = "Sản phẩm 2",
                            ProductType = "RAW_MATERIAL",
                            PurchasePrice = 2000m,
                            SellingPrice = 2500m,
                            Unit = "Cái",
                            WarehouseId = "basket"
                        });
                });

            modelBuilder.Entity("SI.Domain.Entities.ProductionCommands.ProductionCommand", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("PlannedEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("PlannedStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TotalToText")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Code");

                    b.HasIndex("UserId");

                    b.ToTable("PRODUCTIONCOMMAND");
                });

            modelBuilder.Entity("SI.Domain.Entities.ProductionCommands.ProductionCommandDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductionCommandId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionCommandId");

                    b.ToTable("PRODUCTIONCOMMANDDETAIL");
                });

            modelBuilder.Entity("SI.Domain.Entities.ProductionCommands.ProductionCommandProcess", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("ActualEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ActualStart")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<double>("Percentage")
                        .HasColumnType("double");

                    b.Property<string>("ProductionCommandId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionCommandId");

                    b.ToTable("PRODUCTIONCOMMANDPROCESS");
                });

            modelBuilder.Entity("SI.Domain.Entities.Setup", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("ZScore")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("SETUP");
                });

            modelBuilder.Entity("SI.Domain.Entities.TokenStore", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("Browser")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("ExpiredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OSPlatform")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TOKENSTORE");
                });

            modelBuilder.Entity("SI.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("IsLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("USER");

                    b.HasData(
                        new
                        {
                            Id = "0193e2ce-ee41-7fcb-9b52-5bba105dc0bd",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 425, DateTimeKind.Unspecified).AddTicks(8352), new TimeSpan(0, 0, 0, 0, 0)),
                            HashPassword = "27dee27aa573be269f95143a213fe18e29a90e1124b371d280a6c4b88f85f749",
                            IsLogin = true,
                            LoginName = "dev0",
                            Name = "Develop",
                            Role = 0
                        },
                        new
                        {
                            Id = "123456789",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 425, DateTimeKind.Unspecified).AddTicks(8887), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = "bonk",
                            HashPassword = "7ced44abd56279573d3e9730f7845fd68bb5e1d1b09dee076b066f53ca8e8247",
                            IsLogin = true,
                            LoginName = "admin0",
                            Name = "Admin",
                            Role = 1
                        },
                        new
                        {
                            Id = "987654321",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 425, DateTimeKind.Unspecified).AddTicks(9014), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = "hihihaha",
                            HashPassword = "cfbff703c63d47180b95190dac7b4ca5e04e20af5b3c5ec515e4136710815d84",
                            IsLogin = true,
                            LoginName = "staff1",
                            Name = "Staff test",
                            Role = 2
                        },
                        new
                        {
                            Id = "789456123",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 425, DateTimeKind.Unspecified).AddTicks(9016), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = "bankmiramram",
                            HashPassword = "cfbff703c63d47180b95190dac7b4ca5e04e20af5b3c5ec515e4136710815d84",
                            IsLogin = true,
                            LoginName = "producer1",
                            Name = "Producer test",
                            Role = 3
                        },
                        new
                        {
                            Id = "147894561230",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 425, DateTimeKind.Unspecified).AddTicks(9018), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = "dainam",
                            HashPassword = "cfbff703c63d47180b95190dac7b4ca5e04e20af5b3c5ec515e4136710815d84",
                            IsLogin = true,
                            LoginName = "salesman1",
                            Name = "Salesman test",
                            Role = 4
                        });
                });

            modelBuilder.Entity("SI.Domain.Entities.Warehouse", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WAREHOUSE");

                    b.HasData(
                        new
                        {
                            Id = "choi-da-time",
                            Address = "123 ham tu",
                            Capacity = 999,
                            CategoryId = "1",
                            Code = "CDT001",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 432, DateTimeKind.Unspecified).AddTicks(8204), new TimeSpan(0, 0, 0, 0, 0)),
                            DistrictId = "1",
                            Name = "Jellyjellyjelly",
                            ProvinceId = "1",
                            Status = 1,
                            WardId = "1"
                        },
                        new
                        {
                            Id = "basket",
                            Address = "123 ham tu",
                            Capacity = 999,
                            CategoryId = "3",
                            Code = "BASKET001",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 16, 14, 51, 8, 432, DateTimeKind.Unspecified).AddTicks(9421), new TimeSpan(0, 0, 0, 0, 0)),
                            DistrictId = "1",
                            Name = "Basket",
                            ProvinceId = "1",
                            Status = 1,
                            WardId = "1"
                        });
                });

            modelBuilder.Entity("SI.Domain.ValueObjeSI.Location.District", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DISTRICT");
                });

            modelBuilder.Entity("SI.Domain.ValueObjeSI.Location.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("PROVINCE");
                });

            modelBuilder.Entity("SI.Domain.ValueObjeSI.Location.Ward", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Name");

                    b.ToTable("WARD");
                });

            modelBuilder.Entity("SI.Domain.Entities.Agency", b =>
                {
                    b.HasOne("SI.Domain.ValueObjeSI.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.ValueObjeSI.Location.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.ValueObjeSI.Location.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("SI.Domain.Entities.BOM.BillOfMaterial", b =>
                {
                    b.HasOne("SI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SI.Domain.Entities.BOM.BillOfMaterialDetail", b =>
                {
                    b.HasOne("SI.Domain.Entities.BOM.BillOfMaterial", "BillOfMaterial")
                        .WithMany("BillOfMaterialDetails")
                        .HasForeignKey("BillOfMaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Product", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterial");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SI.Domain.Entities.Employee", b =>
                {
                    b.HasOne("SI.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SI.Domain.ValueObjeSI.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("SI.Domain.ValueObjeSI.Location.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.ValueObjeSI.Location.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Employees")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Department");

                    b.Navigation("District");

                    b.Navigation("Position");

                    b.Navigation("Province");

                    b.Navigation("Ward");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SI.Domain.Entities.Forecast", b =>
                {
                    b.HasOne("SI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsIssues.GoodsIssue", b =>
                {
                    b.HasOne("SI.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsIssues.GoodsIssueDetail", b =>
                {
                    b.HasOne("SI.Domain.Entities.GoodsIssues.GoodsIssue", "GoodsIssue")
                        .WithMany("GoodsIssueDetails")
                        .HasForeignKey("GoodsIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GoodsIssue");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsReceipts.GoodsReceipt", b =>
                {
                    b.HasOne("SI.Domain.Entities.MaterialSupplier", "MaterialSupplier")
                        .WithMany()
                        .HasForeignKey("MaterialSupplierId");

                    b.HasOne("SI.Domain.Entities.ProductionCommands.ProductionCommand", "ProductionCommand")
                        .WithMany()
                        .HasForeignKey("ProductionCommandId");

                    b.HasOne("SI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialSupplier");

                    b.Navigation("ProductionCommand");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsReceipts.GoodsReceiptDetail", b =>
                {
                    b.HasOne("SI.Domain.Entities.GoodsReceipts.GoodsReceipt", "GoodsReceipt")
                        .WithMany("GoodsReceiptDetail")
                        .HasForeignKey("GoodsReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GoodsReceipt");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SI.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("SI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SI.Domain.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("SI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SI.Domain.Entities.MaterialSupplier", b =>
                {
                    b.HasOne("SI.Domain.ValueObjeSI.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.ValueObjeSI.Location.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.ValueObjeSI.Location.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("SI.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("SI.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("SI.Domain.Entities.Orders.OrderDetail", b =>
                {
                    b.HasOne("SI.Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SI.Domain.Entities.Position", b =>
                {
                    b.HasOne("SI.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SI.Domain.Entities.Product", b =>
                {
                    b.HasOne("SI.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.MaterialSupplier", "MaterialSupplier")
                        .WithMany()
                        .HasForeignKey("MaterialSupplierId");

                    b.HasOne("SI.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("MaterialSupplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SI.Domain.Entities.ProductionCommands.ProductionCommand", b =>
                {
                    b.HasOne("SI.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SI.Domain.Entities.ProductionCommands.ProductionCommandDetail", b =>
                {
                    b.HasOne("SI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.ProductionCommands.ProductionCommand", "ProductionCommand")
                        .WithMany("ProductionCommandDetail")
                        .HasForeignKey("ProductionCommandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductionCommand");
                });

            modelBuilder.Entity("SI.Domain.Entities.ProductionCommands.ProductionCommandProcess", b =>
                {
                    b.HasOne("SI.Domain.Entities.ProductionCommands.ProductionCommand", "ProductionCommands")
                        .WithMany()
                        .HasForeignKey("ProductionCommandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionCommands");
                });

            modelBuilder.Entity("SI.Domain.Entities.TokenStore", b =>
                {
                    b.HasOne("SI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SI.Domain.Entities.User", b =>
                {
                    b.HasOne("SI.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SI.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("SI.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("SI.Domain.ValueObjeSI.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SI.Domain.ValueObjeSI.Location.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.ValueObjeSI.Location.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SI.Domain.Entities.Warehouse", "MasterWarehouse")
                        .WithMany("SlaveWarehouses")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Category");

                    b.Navigation("District");

                    b.Navigation("Manager");

                    b.Navigation("MasterWarehouse");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("SI.Domain.ValueObjeSI.Location.District", b =>
                {
                    b.HasOne("SI.Domain.ValueObjeSI.Location.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SI.Domain.ValueObjeSI.Location.Ward", b =>
                {
                    b.HasOne("SI.Domain.ValueObjeSI.Location.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("SI.Domain.Entities.BOM.BillOfMaterial", b =>
                {
                    b.Navigation("BillOfMaterialDetails");
                });

            modelBuilder.Entity("SI.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsIssues.GoodsIssue", b =>
                {
                    b.Navigation("GoodsIssueDetails");
                });

            modelBuilder.Entity("SI.Domain.Entities.GoodsReceipts.GoodsReceipt", b =>
                {
                    b.Navigation("GoodsReceiptDetail");
                });

            modelBuilder.Entity("SI.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SI.Domain.Entities.ProductionCommands.ProductionCommand", b =>
                {
                    b.Navigation("ProductionCommandDetail");
                });

            modelBuilder.Entity("SI.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SlaveWarehouses");
                });

            modelBuilder.Entity("SI.Domain.ValueObjeSI.Location.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("SI.Domain.ValueObjeSI.Location.Province", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
